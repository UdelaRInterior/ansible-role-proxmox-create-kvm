---
# proxmox_create_kvm: creation of a complete virtual machine in porxmox cluster
# tasks file for ansible-role-proxmox-create-kvm/

# Extraer el hostname del inventory_hostname (debe ser el fqdn)
- name: Extract hostname from inventory_hostname (must be fqdn)
  set_fact:
    proxmox_hostname: "{{ inventory_hostname.split('.')[0] }}"

# Verificar si python-pip está instalado en el nodo proxmox
- name: Verify that python-pip is installed in the Proxmox node
  apt:
    name: python-pip
    state: present
  delegate_to: "{{ api_host }}"

#  Verificar si el módulo proxmoxer de python está instalado
- name: Verify if proxmoxer pip module is installed
  pip:
    name: proxmoxer
    state: present
  delegate_to: "{{ api_host }}"

# Crear máquina virtual KVM en el nodo Proxmox idóneo.
- name: Create KVM in Proxmox node
  proxmox_kvm:
    node: "{{ node }}"
    api_user: "{{ api_user }}"
    api_host: "{{ api_host }}"
    api_password: "{{api_password}}"
    name: "{{ proxmox_hostname }}"
    cores: "{{ cores }}"
    memory: "{{ memory }}"
    virtio: "{'virtio0':'{{ storage }}:{{ disk }}'{%if storage1 is defined %},'virtio1':'{{ storage1 }}:{{ disk1 }}'{% endif %}{%if storage2 is defined %},'virtio2':'{{ storage2 }}:{{ disk2 }}'{% endif %}}"
    net: >-
      {   {%- for item in net_interfaces -%}
            "{{ item.id }}":"{% if item.model is defined %}{{ item.model }}{% else %}virtio{% endif %}{% if item.hwaddr is defined %}={{ item.hwaddr }}{% endif %},bridge={{ item.bridge }},{% if (item.firewall is defined and item.firewall) %}firewall=1,{% endif %}{% if (item.disconnect is defined and item.disconnect) %}link_down=1,{% endif %}{% if item.multiqueue is defined %}queues=1,{% endif %}{% if item.rate_limit is defined %}rate={{ item.rate_limit }},{% endif %}{% if item.vlan_tag is defined %}tag={{ item.vlan_tag }}{% endif %}",
          {%- endfor -%}  }

    # args:
    #      -kernel /tmp/{{ os }}-{{ kernel | basename }}
    #      -initrd /tmp/{{ os }}-{{ initrd | basename }}
    #      -append "preseed/url={{ preseed }}
    #      debian-installer/allow_unauthenticated_ssl=true
    #      locale=es_UY.UTF-8
    #      debian/priority=critical
    #      vga=normal debian-installer/keymap=es
    #      console-keymaps-at/keymap=es
    #      console-setup/layoutcode=es_UY
    #      netcfg/choose_interface=auto
    #      localechooser/translation/warn-light=true
    #      localechooser/translation/warn-severe=true
    #      console-setup/ask_detect=false
    #      netcfg/get_hostname={{ proxmox_hostname }}
    #      {% if domainname is defined %}
    #      netcfg/get_domain={{ domainname }}
    #      {% else %}
    #      netcfg/get_domain=localdomain
    #      {% endif %}
    #      {% if ( netif_ip4 is defined and netif_netmask is defined ) %}
    #      netcfg/confirm_static=true
    #      netcfg/disable_dhcp=true
    #      netcfg/get_ipaddress={{netif_ip4}}
    #      netcfg/get_netmask={{ netif_netmask }}
    #      {% if netif_gw is defined %}
    #      netcfg/get_gateway={{ netif_gw }}
    #      {% endif %}
    #      {% if nameserver is defined %}
    #      netcfg/get_nameservers={{ nameserver }}
    #      {% endif %}
    #      {% endif %}

    #      FRONTEND_BACKGROUND=original"

#--ip={{ netif_ip4 }} --netmask={{ netif_netmask }}
#--gateway={{ netif_gw }}
#--nameserver={{ nameserver }}
#--hostname={{ proxmox_hostname }}

#	net:
#            net0: "name={{ netif_name }},  {% if (netif_hwaddr is defined) %},hwaddr={{ netif_hwaddr }}{% endif %}{% if (netif_ip6 is defined) %},ip6={{ netif_ip6 }}/{{ netif_netmask6 }}{% endif %}{% if (netif_ip6 is defined) and (gw6 is defined) %},gw6={{ netif_gw6 }}{% endif %}"

#ESTÁ FALTAN IPV6

  register: virtualm
  delegate_to: "{{ api_host }}"


#        ostemplate: "local:vztmpl/{{ url_ostemplate | urlsplit('path') | basename }}"
#        password: "{{ root_password }}"
#        pubkey: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

#    when:  (mounts is not defined) or ( mounts|length == 0 )


## Fectch deploy kernel
#- name: Descargar y deployar el Kernel
#  get_url:
#   url:  "{{ kernel }}"
#   dest: "/tmp/{{ os }}-{{ kernel | basename }}"
#  delegate_to: "{{ api_host }}"


## Fectch deploy Initrd
#- name: Descargar y deplotar el initrd
#  get_url:
#   url:  "{{ initrd }}"
#   dest: "/tmp/{{ os }}-{{ initrd | basename }}"
#  delegate_to: "{{ api_host }}"


# Start VM deployment
#- name: Iniciar la VM y proceder a su instalación
#  proxmox_kvm:
#   node: "{{ node }}"
#   name: "{{ proxmox_hostname }}"
#   api_user: "{{ api_user }}"
#   api_host: "{{ api_host }}"
#   api_password: "{{ api_password }}"
#   state: started
#  delegate_to: "{{ api_host }}"


# Remove deploy args from vm
#- name: remove deploy args from vm
#  proxmox_kvm:
#   api_user: "{{ api_user }}"
#   api_password: "{{ api_password }}"
#   api_host: "{{ api_host }}"
#   node: "{{ item.item.value.node }}"
#   name: "{{ item.item.key }}"
#   delete: args


# Mirá el número de la VM
- name: Show the ID of the VM
  debug:
    var: virtualm

# Extraer el número de VM
- name: Extract the ID of the VM
  shell: |
    set -o pipefail
    qm list | grep -w "{{ proxmox_hostname }}" | awk '{ print $1 }'
  args:
    executable: /bin/bash
  delegate_to: "{{ api_host }}"
  register: VMID
  when: virtualm is succeeded
  changed_when: false
  tags:
    - deploy

- debug:
    var: VMID
  tags:
    - deploy
